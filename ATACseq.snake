import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
ENDS = set(sample_csv['paired_end'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		expand('results/{rep}_{end}_fastqc.html', end=ENDS, rep=REPS),
		expand("results/{rep}_sorted_wMT_flagstats.txt", rep=REPS),
		expand("results/{rep}_sorted_noMT_flagstats.txt", rep=REPS),
		expand("results/{rep}_sorted.idxstats", rep=REPS),
		expand("results/{rep}_sorted_noMT.idxstats", rep=REPS),
		expand("results/{rep}_sorted_shifted.idxstats", rep=REPS),
		'results/multiqc_report.html',
		'results/ATACseq_samplepearsoncorrelation.png',
		"results/annotate_peaks.txt",
		"results/peaks_GO",
		"results/MotifOutput",
		expand("results/{rep}_coverage_plot.png", rep=REPS)


## BUILD GENOME INDEX AND PREPROCESS SAMPLES
rule bowtie2_build_gencode:
	input:
		ref = 'GRCh38.primary_assembly.genome.fa.gz'
	output:
		expand('results/GRCh38_index.{ext}', ext=['1.bt2', '2.bt2', '3.bt2', '4.bt2', 'rev.1.bt2', 'rev.2.bt2'])
	params:
		basename = 'results/GRCh38_index'
	threads: 16
	conda:
		'envs/bowtie2_env.yml'
	shell:
		'''
		bowtie2-build --threads {threads} {input.ref} {params.basename}
		'''

rule fastqc:
	input:
		fastq = 'samples/{rep}_{end}.fastq.gz'
	output:
		fastqc = 'results/{rep}_{end}_fastqc.html'
	params:
		outdir = 'results/'
	threads: 4
	conda:
		'envs/fastqc_env.yml'
	shell:
		'''
		fastqc --threads {threads} {input.fastq} -o {params.outdir}
		'''

rule trimomatic:
	input: 
		fastq1 = 'samples/{rep}_R1.fastq.gz',
		fastq2 = 'samples/{rep}_R2.fastq.gz',
		adapters = 'adapter/NexteraPE-PE.fa'
	output:
		unpaired1 = 'results/{rep}_R1.unpaired.trimmed.fastq',
		unpaired2 = 'results/{rep}_R2.unpaired.trimmed.fastq',
		paired1 = 'results/{rep}_R1.paired.trimmed.fastq',
		paired2 = 'results/{rep}_R2.paired.trimmed.fastq'
	threads: 8
	conda:
		'envs/trimmomatic_env.yml'
	shell:
		'''
		trimmomatic PE -threads {threads} {input.fastq1} {input.fastq2} {output.paired1} {output.unpaired1} {output.paired2} {output.unpaired2} ILLUMINACLIP:{input.adapters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15
		'''

## ALIGNMENT AND PROCESSING
rule bowtie2_align:
	input:
		fastq1 = "results/{rep}_R1.paired.trimmed.fastq",
		fastq2 = "results/{rep}_R2.paired.trimmed.fastq"
	output:
		bam = "results/{rep}.bam"
	threads: 32
	params:
		basename = "results/GRCh38_index"
	conda:
		'envs/bowtie2_env.yml'
	shell:
		'''
		bowtie2 --threads {threads} -X 2000 -x {params.basename} -1 {input.fastq1} -2 {input.fastq2} \
		 | samtools view -h -S -b -o {output.bam} 
		'''

rule samtools_sort:
	input:
		bam = "results/{rep}.bam"
	output:
		sorted = "results/{rep}.sorted.bam"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools sort {input.bam} -o {output.sorted}
		'''

rule flagstats_wMT:
	input:
		bam = "results/{rep}.sorted.bam"
	output:
		flagstats = 'results/{rep}_sorted_wMT_flagstats.txt'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools flagstats {input.bam} > {output.flagstats}
		'''

rule idxstats_wMT:
	input:
		bam = "results/{rep}.sorted.bam"
	output:
		idxs = "results/{rep}_sorted.idxstats"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools idxstats {input.bam} > {output.idxs}
		'''

rule remove_MT:
	input:
		bam = "results/{rep}.sorted.bam"
	output:
		bam_noMT = "results/{rep}.sorted_noMT.bam"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools view -h {input.bam} | grep -v chrM | samtools sort -O bam -o {output.bam_noMT} -T .
		'''

rule flagstats_noMT:
	input:
		bam = "results/{rep}.sorted_noMT.bam"
	output:
		flagstats = 'results/{rep}_sorted_noMT_flagstats.txt'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools flagstats {input.bam} > {output.flagstats}
		'''

rule idxstats_noMT:
	input:
		bam = "results/{rep}.sorted_noMT.bam"
	output:
		idxs = "results/{rep}_sorted_noMT.idxstats"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools idxstats {input.bam} > {output.idxs}
		'''

rule samtools_idx:
	input:
		bam = "results/{rep}.sorted_noMT.bam"
	output:
		bai = "results/{rep}.sorted_noMT.bam.bai"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools index {input.bam} {output.bai}
		'''

rule alignmentsieve:
	input:
		bam = "results/{rep}.sorted_noMT.bam",
		bai = "results/{rep}.sorted_noMT.bam.bai"
	output:
		bam = "results/{rep}.shifted.bam"
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		alignmentSieve --ATACshift -b {input.bam} -o {output.bam}
		'''

rule samtools_resort:
	input:
		bam = "results/{rep}.shifted.bam"
	output:
		sorted = "results/{rep}.shifted.resorted.bam"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools sort {input.bam} -o {output.sorted}
		'''

rule samtools_idx_shifted:
	input:
		bam = "results/{rep}.shifted.resorted.bam"
	output:
		bai = "results/{rep}.shifted.resorted.bam.bai"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools index {input.bam} {output.bai}
		'''

rule idxstats_shifted:
	input:
		bam = "results/{rep}.shifted.resorted.bam",
		bai = "results/{rep}.shifted.resorted.bam.bai"
	output:
		idxs = "results/{rep}_sorted_shifted.idxstats"
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools idxstats {input.bam} > {output.idxs}
		'''

rule multiqc:
	input:
		fq = expand("results/{rep}_sorted_shifted.idxstats", rep=REPS)
	output:
		multiqc = 'results/multiqc_report.html'
	params:
		results = 'results/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc {params.results} -o {params.results} -f
		'''

rule bamCoverage:
	input:
		bam = "results/{rep}.shifted.resorted.bam",
		bai = "results/{rep}.shifted.resorted.bam.bai"
	output:
		bigwig = "results/{rep}.bigWig"
	threads: 4
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		bamCoverage -b {input.bam} -o {output.bigwig}
		'''

rule multiBwSummary:
	input:
		bigwig = expand("results/{rep}.bigWig", rep=REPS)
	output:
		multiBW = "results/ATACseq_sampleresults.npz"
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		multiBigwigSummary bins -b {input.bigwig} -o {output.multiBW}
		'''

rule plotCorrelation:
	input:
		matrix = 'results/ATACseq_sampleresults.npz'
	output:
		plot = 'results/ATACseq_samplepearsoncorrelation.png'
	params:
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		plotCorrelation -in {input.matrix} --corMethod spearman --skipZeros \
		--whatToPlot heatmap --plotNumbers -o {output.plot}
		'''

# PEAK CALLING AND MOTIF FINDING
# MACS3 callpeak

rule MACS3_callpeak:
	input:
		bam = "results/{rep}.shifted.resorted.bam",
		bai = "results/{rep}.shifted.resorted.bam.bai"
	output:
		control = "results/{rep}.Macs3callpeaks_control_lambda.bdg",
		treat = "results/{rep}.Macs3callpeaks_treat_pileup.bdg",
		summits = "results/{rep}.Macs3callpeaks_summits.bed",
		xls = "results/{rep}.Macs3callpeaks_peaks.xls",
		narrowPeak = "results/{rep}.Macs3callpeaks_peaks.narrowPeak"
	params:
		peaks = "results/{rep}.Macs3callpeaks"
	conda:
		'envs/macs_env.yml'
	shell:
		'''
		macs3 callpeak -f BAMPE -t {input.bam} -g hs -n {params.peaks} -B -q 0.01
		'''

rule intersect_peaks:
	input:
		bed1 = "results/ATACrep3.Macs3callpeaks_summits.bed",
		bed2 = "results/ATACrep4.Macs3callpeaks_summits.bed"
	output:
		rep_peaks = "results/reproducible_peaks.bed"
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.bed1} -b {input.bed2} -f 0.5 -r > {output.rep_peaks}
		'''

rule filter_blacklist:
	input: 
		rep_peaks = "results/reproducible_peaks.bed",
		blacklist = "samples/hg38-blacklist.v2.bed"
	output:
		filtered_peaks = "results/reproducible_peaks_blacklist_filtered.bed"
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.rep_peaks} -b {input.blacklist} -v > {output.filtered_peaks}
		'''

rule annotate_peaks:
	input:
		peaks = "results/reproducible_peaks_blacklist_filtered.bed",
		gtf = "samples/gencode.v45.primary_assembly.annotation.gtf"
	output:
		annotated = "results/annotate_peaks.txt",
		GO = directory("results/peaks_GO")
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		annotatePeaks.pl {input.peaks} hg38 -gtf {input.gtf} > {output.annotated} -go {output.GO}
		'''

rule motifs:
	input:
		peaks = "results/reproducible_peaks_blacklist_filtered.bed",
		genome = "samples/GRCh38.primary_assembly.genome.fa"
	output:
		output_dir = directory("results/MotifOutput")
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findMotifsGenome.pl {input.peaks} {input.genome} {output.output_dir} -size 200
		'''

## SIGNAL PLOT
rule bamCoverage_NFR:
    input:
        bam = "results/{rep}.shifted.resorted.bam"
    output:
        nfr = "results/{rep}.NFR.bigWig"
    conda:
        'envs/deeptools_env.yml'
    shell:
        '''
        bamCoverage -b {input.bam} --maxFragmentLength 100 -o {output.nfr}
        '''

rule bamCoverage_NBR:
    input:
        bam = "results/{rep}.shifted.resorted.bam"
    output:
        nbr = "results/{rep}.NBR.bigWig"
    conda:
        'envs/deeptools_env.yml'
    shell:
        '''
        bamCoverage -b {input.bam} --minFragmentLength 100 -o {output.nbr}
        '''


rule computeMatrix_combined:
    input:
        bed = "samples/hg38_genes.bed",
        NBR = "results/{rep}.NBR.bigWig",
        NFR = "results/{rep}.NFR.bigWig",
    output:
        matrix = "results/{rep}.combined_matrix.gz"
    params:
        bin_size = 2000
    conda:
        'envs/deeptools_env.yml'
    threads: 4
    shell:
        '''
        computeMatrix scale-regions -S {input.NBR} {input.NFR} -R {input.bed} -b {params.bin_size} -a{params.bin_size} -o {output.matrix} 
        '''

rule plotProfile:
    input:
        matrix =  "results/{rep}.combined_matrix.gz"
    output:
        plot = "results/{rep}_coverage_plot.png"
    conda:
        'envs/deeptools_env.yml'
    shell:
        '''
        plotProfile -m {input.matrix} -out {output.plot} --perGroup
        '''
